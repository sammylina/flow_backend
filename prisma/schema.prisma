generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  passwordHash     String
  language         String
  coins            Int               @default(0)
  isPaid           Boolean           @default(false)
  coinTransactions CoinTransaction[]
  progress         LessonProgress[]
  playlists        Playlist[]
  purchases        Purchase[]

  @@map("users")
}

model Playlist {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  level       String
  lessonCount Int      @default(0) @map("lesson_count")
  userId      Int      @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  lessons     Lesson[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("playlists")
}

model Lesson {
  id         Int              @id @default(autoincrement())
  title      String
  audioUrl   String
  playlistId Int              @map("playlist_id")
  order      Int              @default(0)
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")
  progress   LessonProgress[]
  playlist   Playlist         @relation(fields: [playlistId], references: [id])
  StudyItem  StudyItem[]

  @@map("lessons")
}

model LessonProgress {
  id             Int      @id @default(autoincrement())
  userId         Int
  completed      Boolean  @default(false)
  score          Int?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  flowCompleted  Boolean  @default(false)
  studyCompleted Boolean  @default(false)
  lessonId       Int
  lesson         Lesson   @relation(fields: [lessonId], references: [id])
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Purchase {
  id        Int      @id @default(autoincrement())
  userId    Int
  itemType  String
  itemId    String?
  amount    Decimal
  currency  String   @default("USD")
  status    String   @default("pending")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model CoinTransaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Int
  type        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("coin_transactions")
}

model StudyItem {
  id         Int           @id @default(autoincrement())
  lessonId   Int    @map("lesson_id")
  type       StudyItemType
  prompt     String
  targetText String
  audioUrl   String
  lessons    Lesson @relation(fields: [lessonId], references: [id])

  @@index([lessonId])
  @@map("study_items")
}

enum StudyItemType {
  pronounciation
  writing
}
